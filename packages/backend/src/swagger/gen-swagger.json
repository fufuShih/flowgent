{
  "openapi": "3.0.0",
  "info": {
    "title": "Matrix Flow API",
    "version": "1.0.0",
    "description": "API documentation for Matrix Flow application",
    "contact": {
      "name": "API Support",
      "url": "https://github.com/yourusername/matrix-flow"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3004",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "string",
            "example": "Error message"
          }
        }
      },
      "Success": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object"
          }
        }
      },
      "ConnectionCondition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The condition ID"
          },
          "connectionId": {
            "type": "integer",
            "description": "The associated connection ID"
          },
          "condition": {
            "type": "object",
            "description": "The condition configuration object"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "connectionId",
          "condition",
          "created",
          "updated"
        ]
      },
      "Connection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The connection ID"
          },
          "matrixId": {
            "type": "integer",
            "description": "The matrix ID this connection belongs to"
          },
          "sourceId": {
            "type": "integer",
            "description": "Source node ID"
          },
          "targetId": {
            "type": "integer",
            "description": "Target node ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "default",
              "success",
              "error",
              "condition"
            ],
            "description": "Connection type"
          },
          "config": {
            "type": "object",
            "description": "Connection configuration"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "matrixId",
          "sourceId",
          "targetId",
          "type",
          "created",
          "updated"
        ]
      },
      "Matrix": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The matrix ID"
          },
          "projectId": {
            "type": "integer",
            "description": "The project ID this matrix belongs to"
          },
          "name": {
            "type": "string",
            "description": "Matrix name"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Matrix description"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "draft",
              "error"
            ],
            "description": "Matrix status"
          },
          "config": {
            "type": "object",
            "description": "Matrix configuration"
          },
          "version": {
            "type": "integer",
            "description": "Matrix version number"
          },
          "parentMatrixId": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the parent matrix (if this is a sub-matrix)"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "projectId",
          "name",
          "status",
          "version",
          "created",
          "updated"
        ]
      },
      "Node": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The node ID"
          },
          "matrixId": {
            "type": "integer",
            "description": "The matrix ID this node belongs to"
          },
          "type": {
            "type": "string",
            "enum": [
              "trigger",
              "action",
              "condition",
              "subMatrix",
              "transformer",
              "loop"
            ],
            "description": "Node type"
          },
          "name": {
            "type": "string",
            "description": "Node name"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Node description"
          },
          "config": {
            "type": "object",
            "description": "Node configuration"
          },
          "position": {
            "type": "object",
            "properties": {
              "x": {
                "type": "number"
              },
              "y": {
                "type": "number"
              }
            }
          },
          "subMatrixId": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the sub-matrix (if type is subMatrix)"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "matrixId",
          "type",
          "name",
          "position",
          "created",
          "updated"
        ]
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The project ID"
          },
          "name": {
            "type": "string",
            "description": "The project name"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The project description"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "created",
          "updated"
        ]
      },
      "Trigger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The trigger ID"
          },
          "nodeId": {
            "type": "integer",
            "description": "The associated node ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "webhook",
              "schedule",
              "event",
              "manual",
              "email",
              "database"
            ],
            "description": "Trigger type"
          },
          "name": {
            "type": "string",
            "description": "Trigger name"
          },
          "config": {
            "type": "object",
            "description": "Trigger configuration"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "error"
            ],
            "description": "Trigger status"
          },
          "lastTriggered": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nextTrigger": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "nodeId",
          "type",
          "name",
          "status",
          "created",
          "updated"
        ]
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "apis": [
    "./src/routes/*.ts"
  ],
  "paths": {
    "/api/connections/{connectionId}/conditions": {
      "get": {
        "summary": "Get all conditions for a connection",
        "tags": [
          "Connection Conditions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "connectionId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Connection ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of conditions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectionCondition"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid connection ID"
          },
          "404": {
            "description": "Connection not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new condition",
        "tags": [
          "Connection Conditions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "connectionId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Connection ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "condition"
                ],
                "properties": {
                  "condition": {
                    "type": "object",
                    "description": "Condition configuration object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Condition created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionCondition"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body or connection ID"
          },
          "404": {
            "description": "Connection not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/connection-conditions/{id}": {
      "get": {
        "summary": "Get a condition by ID",
        "tags": [
          "Connection Conditions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Condition ID"
          },
          {
            "in": "query",
            "name": "includeConnection",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include connection details in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Condition found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ConnectionCondition"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "connection": {
                          "$ref": "#/components/schemas/Connection"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid condition ID"
          },
          "404": {
            "description": "Condition not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update a condition",
        "tags": [
          "Connection Conditions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Condition ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "condition": {
                    "type": "object",
                    "description": "Updated condition configuration"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Condition updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionCondition"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body or condition ID"
          },
          "404": {
            "description": "Condition not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a condition",
        "tags": [
          "Connection Conditions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Condition ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Condition deleted successfully"
          },
          "400": {
            "description": "Invalid condition ID"
          },
          "404": {
            "description": "Condition not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/matrix/{matrixId}/connections": {
      "get": {
        "summary": "Get all connections for a matrix",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "matrixId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Matrix ID"
          },
          {
            "in": "query",
            "name": "includeConditions",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include conditions in response"
          }
        ],
        "responses": {
          "200": {
            "description": "List of connections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Connection"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "conditions": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/ConnectionCondition"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid matrix ID"
          },
          "404": {
            "description": "Matrix not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new connection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "matrixId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Matrix ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sourceId",
                  "targetId"
                ],
                "properties": {
                  "sourceId": {
                    "type": "integer"
                  },
                  "targetId": {
                    "type": "integer"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "default",
                      "success",
                      "error",
                      "condition"
                    ],
                    "default": "default"
                  },
                  "config": {
                    "type": "object"
                  },
                  "conditions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "condition": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Connection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Matrix not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/connections/{connectionId}": {
      "get": {
        "summary": "Get a connection by ID",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "connectionId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Connection ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Connection found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "400": {
            "description": "Invalid connection ID"
          },
          "404": {
            "description": "Connection not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update a connection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "connectionId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Connection ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "default",
                      "success",
                      "error",
                      "condition"
                    ]
                  },
                  "config": {
                    "type": "object"
                  },
                  "conditions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "condition": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Connection updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "404": {
            "description": "Connection not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a connection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "connectionId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Connection ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Connection deleted successfully"
          },
          "400": {
            "description": "Invalid connection ID"
          },
          "404": {
            "description": "Connection not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/project/{projectId}/matrix": {
      "get": {
        "summary": "Get all matrices for a project",
        "tags": [
          "Matrix"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Items per page"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "draft",
                "error"
              ]
            },
            "description": "Filter by status"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by version"
          }
        ],
        "responses": {
          "200": {
            "description": "List of matrices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Matrix"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "totalPages": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new matrix",
        "tags": [
          "Matrix"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive",
                      "draft",
                      "error"
                    ],
                    "default": "draft"
                  },
                  "config": {
                    "type": "object"
                  },
                  "parentMatrixId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Matrix created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Matrix"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Project or parent matrix not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/matrix/{matrixId}": {
      "get": {
        "summary": "Get a matrix by ID",
        "tags": [
          "Matrix"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "matrixId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Matrix ID"
          },
          {
            "in": "query",
            "name": "includeNodes",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include nodes in response"
          },
          {
            "in": "query",
            "name": "includeConnections",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include connections in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Matrix found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Matrix"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nodes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Node"
                          }
                        },
                        "connections": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Connection"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid matrix ID"
          },
          "404": {
            "description": "Matrix not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update a matrix",
        "tags": [
          "Matrix"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "matrixId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Matrix ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive",
                      "draft",
                      "error"
                    ]
                  },
                  "config": {
                    "type": "object"
                  },
                  "version": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Matrix updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Matrix"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "404": {
            "description": "Matrix not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a matrix",
        "tags": [
          "Matrix"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "matrixId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Matrix ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Matrix deleted successfully"
          },
          "400": {
            "description": "Invalid matrix ID or matrix has child matrices"
          },
          "404": {
            "description": "Matrix not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/matrix/{matrixId}/clone": {
      "post": {
        "summary": "Clone a matrix",
        "tags": [
          "Matrix"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "matrixId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Matrix ID to clone"
          }
        ],
        "responses": {
          "201": {
            "description": "Matrix cloned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Matrix"
                }
              }
            }
          },
          "400": {
            "description": "Invalid matrix ID"
          },
          "404": {
            "description": "Matrix not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/matrix/{matrixId}/nodes": {
      "get": {
        "summary": "Get all nodes for a matrix",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "matrixId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Matrix ID"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "trigger",
                "action",
                "condition",
                "subMatrix",
                "transformer",
                "loop"
              ]
            },
            "description": "Filter nodes by type"
          },
          {
            "in": "query",
            "name": "includeTrigger",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include trigger details for trigger nodes"
          }
        ],
        "responses": {
          "200": {
            "description": "List of nodes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Node"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "trigger": {
                            "$ref": "#/components/schemas/Trigger"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid matrix ID"
          },
          "404": {
            "description": "Matrix not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new node",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "matrixId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Matrix ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "name",
                  "position"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "trigger",
                      "action",
                      "condition",
                      "subMatrix",
                      "transformer",
                      "loop"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "description": {
                    "type": "string"
                  },
                  "config": {
                    "type": "object"
                  },
                  "position": {
                    "type": "object",
                    "required": [
                      "x",
                      "y"
                    ],
                    "properties": {
                      "x": {
                        "type": "number"
                      },
                      "y": {
                        "type": "number"
                      }
                    }
                  },
                  "subMatrixId": {
                    "type": "integer"
                  },
                  "trigger": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "webhook",
                          "schedule",
                          "event",
                          "manual",
                          "email",
                          "database"
                        ]
                      },
                      "name": {
                        "type": "string"
                      },
                      "config": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Node created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Matrix not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/nodes/{nodeId}": {
      "get": {
        "summary": "Get a node by ID",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Node ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Node found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Node"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "trigger": {
                          "$ref": "#/components/schemas/Trigger"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid node ID"
          },
          "404": {
            "description": "Node not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update a node",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Node ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "description": {
                    "type": "string"
                  },
                  "config": {
                    "type": "object"
                  },
                  "position": {
                    "type": "object",
                    "properties": {
                      "x": {
                        "type": "number"
                      },
                      "y": {
                        "type": "number"
                      }
                    }
                  },
                  "trigger": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "webhook",
                          "schedule",
                          "event",
                          "manual",
                          "email",
                          "database"
                        ]
                      },
                      "name": {
                        "type": "string"
                      },
                      "config": {
                        "type": "object"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "active",
                          "inactive",
                          "error"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Node updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Node"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "404": {
            "description": "Node not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a node",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Node ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Node deleted successfully"
          },
          "400": {
            "description": "Invalid node ID"
          },
          "404": {
            "description": "Node not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/projects": {
      "get": {
        "summary": "Get a paginated list of projects",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search term for project name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Project"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "totalPages": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          }
        }
      },
      "post": {
        "summary": "Create a new project",
        "tags": [
          "Projects"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "409": {
            "description": "Project name already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/projects/{projectId}": {
      "get": {
        "summary": "Get a project by ID",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Project found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid project ID"
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update a project",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "404": {
            "description": "Project not found"
          },
          "409": {
            "description": "Project name already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a project",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Project deleted successfully"
          },
          "400": {
            "description": "Invalid project ID"
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/nodes/{nodeId}/trigger": {
      "get": {
        "summary": "Get trigger for a node",
        "tags": [
          "Triggers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Node ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Trigger found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trigger"
                }
              }
            }
          },
          "400": {
            "description": "Invalid node ID or node is not a trigger"
          },
          "404": {
            "description": "Node or trigger not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new trigger",
        "tags": [
          "Triggers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Node ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "name"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "webhook",
                      "schedule",
                      "event",
                      "manual",
                      "email",
                      "database"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "config": {
                    "type": "object"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive",
                      "error"
                    ],
                    "default": "inactive"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Trigger created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trigger"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body or node is not a trigger"
          },
          "404": {
            "description": "Node not found"
          },
          "409": {
            "description": "Trigger already exists for this node"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/triggers/{triggerId}": {
      "get": {
        "summary": "Get a trigger by ID",
        "tags": [
          "Triggers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "triggerId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Trigger ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Trigger found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Trigger"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "node": {
                          "$ref": "#/components/schemas/Node"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid trigger ID"
          },
          "404": {
            "description": "Trigger not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update a trigger",
        "tags": [
          "Triggers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "triggerId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Trigger ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "webhook",
                      "schedule",
                      "event",
                      "manual",
                      "email",
                      "database"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "config": {
                    "type": "object"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive",
                      "error"
                    ]
                  },
                  "lastTriggered": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "nextTrigger": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trigger updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Trigger"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "404": {
            "description": "Trigger not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a trigger",
        "tags": [
          "Triggers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "triggerId",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Trigger ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Trigger deleted successfully"
          },
          "400": {
            "description": "Invalid trigger ID"
          },
          "404": {
            "description": "Trigger not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "tags": []
}