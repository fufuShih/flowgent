// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { PostApiExecuteMatrixByIdData, PostApiExecuteMatrixByIdError, PostApiExecuteMatrixByIdResponse, GetApiMatrixError, GetApiMatrixResponse, PostApiMatrixData, PostApiMatrixError, PostApiMatrixResponse, GetApiMatrixByIdData, GetApiMatrixByIdError, GetApiMatrixByIdResponse, PutApiMatrixByIdData, PutApiMatrixByIdError, PutApiMatrixByIdResponse, DeleteApiMatrixByIdData, DeleteApiMatrixByIdError, DeleteApiMatrixByIdResponse, GetApiMatrixByIdNodesData, GetApiMatrixByIdNodesError, GetApiMatrixByIdNodesResponse, GetApiMatrixByIdConnectionsData, GetApiMatrixByIdConnectionsError, GetApiMatrixByIdConnectionsResponse, GetApiNodeTypeError, GetApiNodeTypeResponse, GetApiProjectError, GetApiProjectResponse, PostApiProjectData, PostApiProjectError, PostApiProjectResponse, GetApiProjectByIdData, GetApiProjectByIdError, GetApiProjectByIdResponse, PutApiProjectByIdData, PutApiProjectByIdError, PutApiProjectByIdResponse, DeleteApiProjectByIdData, DeleteApiProjectByIdError, DeleteApiProjectByIdResponse, GetApiTriggerError, GetApiTriggerResponse, PostApiTriggerData, PostApiTriggerError, PostApiTriggerResponse, GetApiTriggerByIdData, GetApiTriggerByIdError, GetApiTriggerByIdResponse, PutApiTriggerByIdData, PutApiTriggerByIdError, PutApiTriggerByIdResponse, DeleteApiTriggerByIdData, DeleteApiTriggerByIdError, DeleteApiTriggerByIdResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Execute a matrix flow
 * Executes a matrix flow with the given input
 */
export const postApiExecuteMatrixById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiExecuteMatrixByIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiExecuteMatrixByIdResponse, PostApiExecuteMatrixByIdError, ThrowOnError>({
        ...options,
        url: '/api/execute/matrix/{id}'
    });
};

/**
 * Get all matrices
 */
export const getApiMatrix = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiMatrixResponse, GetApiMatrixError, ThrowOnError>({
        ...options,
        url: '/api/matrix'
    });
};

/**
 * Create a new matrix
 */
export const postApiMatrix = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMatrixData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiMatrixResponse, PostApiMatrixError, ThrowOnError>({
        ...options,
        url: '/api/matrix'
    });
};

/**
 * Get a matrix by ID
 */
export const getApiMatrixById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMatrixByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiMatrixByIdResponse, GetApiMatrixByIdError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{id}'
    });
};

/**
 * Update a matrix
 */
export const putApiMatrixById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiMatrixByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiMatrixByIdResponse, PutApiMatrixByIdError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{id}'
    });
};

/**
 * Delete a matrix
 */
export const deleteApiMatrixById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiMatrixByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiMatrixByIdResponse, DeleteApiMatrixByIdError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{id}'
    });
};

/**
 * Get all nodes for a matrix
 */
export const getApiMatrixByIdNodes = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMatrixByIdNodesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiMatrixByIdNodesResponse, GetApiMatrixByIdNodesError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{id}/nodes'
    });
};

/**
 * Get all connections for a matrix
 */
export const getApiMatrixByIdConnections = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMatrixByIdConnectionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiMatrixByIdConnectionsResponse, GetApiMatrixByIdConnectionsError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{id}/connections'
    });
};

/**
 * Get all available node types
 * Returns a list of all possible node types in the system
 */
export const getApiNodeType = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiNodeTypeResponse, GetApiNodeTypeError, ThrowOnError>({
        ...options,
        url: '/api/node-type'
    });
};

/**
 * Get all projects
 */
export const getApiProject = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiProjectResponse, GetApiProjectError, ThrowOnError>({
        ...options,
        url: '/api/project'
    });
};

/**
 * Create a new project
 */
export const postApiProject = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiProjectData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiProjectResponse, PostApiProjectError, ThrowOnError>({
        ...options,
        url: '/api/project'
    });
};

/**
 * Get a project by ID
 */
export const getApiProjectById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiProjectByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiProjectByIdResponse, GetApiProjectByIdError, ThrowOnError>({
        ...options,
        url: '/api/project/{id}'
    });
};

/**
 * Update a project
 */
export const putApiProjectById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiProjectByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiProjectByIdResponse, PutApiProjectByIdError, ThrowOnError>({
        ...options,
        url: '/api/project/{id}'
    });
};

/**
 * Delete a project
 */
export const deleteApiProjectById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiProjectByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiProjectByIdResponse, DeleteApiProjectByIdError, ThrowOnError>({
        ...options,
        url: '/api/project/{id}'
    });
};

/**
 * Get all triggers
 */
export const getApiTrigger = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiTriggerResponse, GetApiTriggerError, ThrowOnError>({
        ...options,
        url: '/api/trigger'
    });
};

/**
 * Create a new trigger
 */
export const postApiTrigger = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiTriggerData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiTriggerResponse, PostApiTriggerError, ThrowOnError>({
        ...options,
        url: '/api/trigger'
    });
};

/**
 * Get a trigger by ID
 */
export const getApiTriggerById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiTriggerByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiTriggerByIdResponse, GetApiTriggerByIdError, ThrowOnError>({
        ...options,
        url: '/api/trigger/{id}'
    });
};

/**
 * Update a trigger
 */
export const putApiTriggerById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiTriggerByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiTriggerByIdResponse, PutApiTriggerByIdError, ThrowOnError>({
        ...options,
        url: '/api/trigger/{id}'
    });
};

/**
 * Delete a trigger
 */
export const deleteApiTriggerById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiTriggerByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiTriggerByIdResponse, DeleteApiTriggerByIdError, ThrowOnError>({
        ...options,
        url: '/api/trigger/{id}'
    });
};