// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { GetApiMatrixProjectByProjectIdData, GetApiMatrixProjectByProjectIdError, GetApiMatrixProjectByProjectIdResponse, PostApiMatrixProjectByProjectIdData, PostApiMatrixProjectByProjectIdError, PostApiMatrixProjectByProjectIdResponse, GetApiMatrixByMatrixIdData, GetApiMatrixByMatrixIdError, GetApiMatrixByMatrixIdResponse, PatchApiMatrixByMatrixIdData, PatchApiMatrixByMatrixIdError, PatchApiMatrixByMatrixIdResponse, DeleteApiMatrixByMatrixIdData, DeleteApiMatrixByMatrixIdError, DeleteApiMatrixByMatrixIdResponse, PostApiMatrixByMatrixIdCloneData, PostApiMatrixByMatrixIdCloneError, PostApiMatrixByMatrixIdCloneResponse, GetApiMatrixByMatrixIdWorkflowData, PostApiMatrixByMatrixIdNodesData, PostApiMatrixByMatrixIdNodesError, PostApiMatrixByMatrixIdNodesResponse, PatchApiMatrixByMatrixIdConnectionsData, DeleteApiMatrixByMatrixIdConnectionsData, GetApiProjectsData, GetApiProjectsError, GetApiProjectsResponse, PostApiProjectsData, PostApiProjectsError, PostApiProjectsResponse, GetApiProjectsByProjectIdData, GetApiProjectsByProjectIdError, GetApiProjectsByProjectIdResponse, PatchApiProjectsByProjectIdData, PatchApiProjectsByProjectIdError, PatchApiProjectsByProjectIdResponse, DeleteApiProjectsByProjectIdData, DeleteApiProjectsByProjectIdError, DeleteApiProjectsByProjectIdResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get all matrices for a project
 */
export const getApiMatrixProjectByProjectId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMatrixProjectByProjectIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiMatrixProjectByProjectIdResponse, GetApiMatrixProjectByProjectIdError, ThrowOnError>({
        ...options,
        url: '/api/matrix/project/{projectId}'
    });
};

/**
 * Create a new matrix
 */
export const postApiMatrixProjectByProjectId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMatrixProjectByProjectIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiMatrixProjectByProjectIdResponse, PostApiMatrixProjectByProjectIdError, ThrowOnError>({
        ...options,
        url: '/api/matrix/project/{projectId}'
    });
};

/**
 * Get a matrix by ID
 */
export const getApiMatrixByMatrixId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMatrixByMatrixIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiMatrixByMatrixIdResponse, GetApiMatrixByMatrixIdError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}'
    });
};

/**
 * Update a matrix
 */
export const patchApiMatrixByMatrixId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiMatrixByMatrixIdData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchApiMatrixByMatrixIdResponse, PatchApiMatrixByMatrixIdError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}'
    });
};

/**
 * Delete a matrix
 */
export const deleteApiMatrixByMatrixId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiMatrixByMatrixIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiMatrixByMatrixIdResponse, DeleteApiMatrixByMatrixIdError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}'
    });
};

/**
 * Clone a matrix
 */
export const postApiMatrixByMatrixIdClone = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMatrixByMatrixIdCloneData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiMatrixByMatrixIdCloneResponse, PostApiMatrixByMatrixIdCloneError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/clone'
    });
};

/**
 * Get workflow data for a matrix
 */
export const getApiMatrixByMatrixIdWorkflow = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMatrixByMatrixIdWorkflowData, ThrowOnError>) => {
    return (options?.client ?? client).get<void, unknown, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/workflow'
    });
};

/**
 * Create new nodes in the matrix
 */
export const postApiMatrixByMatrixIdNodes = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMatrixByMatrixIdNodesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiMatrixByMatrixIdNodesResponse, PostApiMatrixByMatrixIdNodesError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/nodes'
    });
};

/**
 * Update existing nodes in the matrix
 */
export const patchApiMatrixByMatrixIdNodes = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).patch<void, unknown, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/nodes'
    });
};

/**
 * Delete nodes from the matrix
 */
export const deleteApiMatrixByMatrixIdNodes = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).delete<void, unknown, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/nodes'
    });
};

/**
 * Create new connections in the matrix
 */
export const postApiMatrixByMatrixIdConnections = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<void, unknown, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/connections'
    });
};

/**
 * Update existing connections in the matrix
 */
export const patchApiMatrixByMatrixIdConnections = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiMatrixByMatrixIdConnectionsData, ThrowOnError>) => {
    return (options?.client ?? client).patch<void, unknown, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/connections'
    });
};

/**
 * Delete connections from the matrix
 */
export const deleteApiMatrixByMatrixIdConnections = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiMatrixByMatrixIdConnectionsData, ThrowOnError>) => {
    return (options?.client ?? client).delete<void, unknown, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/connections'
    });
};

/**
 * Create trigger node
 */
export const postApiMatrixByMatrixIdTriggers = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<void, unknown, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/triggers'
    });
};

/**
 * Activate trigger
 */
export const postApiMatrixByMatrixIdTriggersNodeIdActivate = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<void, unknown, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/triggers/:nodeId/activate'
    });
};

/**
 * Deactivate trigger
 */
export const postApiMatrixByMatrixIdTriggersNodeIdDeactivate = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<void, unknown, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/triggers/:nodeId/deactivate'
    });
};

/**
 * Execute trigger
 */
export const postApiMatrixByMatrixIdTriggersNodeIdExecute = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<void, unknown, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/triggers/:nodeId/execute'
    });
};

/**
 * Get a paginated list of projects
 */
export const getApiProjects = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiProjectsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiProjectsResponse, GetApiProjectsError, ThrowOnError>({
        ...options,
        url: '/api/projects'
    });
};

/**
 * Create a new project
 */
export const postApiProjects = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiProjectsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiProjectsResponse, PostApiProjectsError, ThrowOnError>({
        ...options,
        url: '/api/projects'
    });
};

/**
 * Get a project by ID
 */
export const getApiProjectsByProjectId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiProjectsByProjectIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiProjectsByProjectIdResponse, GetApiProjectsByProjectIdError, ThrowOnError>({
        ...options,
        url: '/api/projects/{projectId}'
    });
};

/**
 * Update a project
 */
export const patchApiProjectsByProjectId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiProjectsByProjectIdData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchApiProjectsByProjectIdResponse, PatchApiProjectsByProjectIdError, ThrowOnError>({
        ...options,
        url: '/api/projects/{projectId}'
    });
};

/**
 * Delete a project
 */
export const deleteApiProjectsByProjectId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiProjectsByProjectIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiProjectsByProjectIdResponse, DeleteApiProjectsByProjectIdError, ThrowOnError>({
        ...options,
        url: '/api/projects/{projectId}'
    });
};