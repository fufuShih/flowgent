// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { GetApiConnectionsByConnectionIdConditionsData, GetApiConnectionsByConnectionIdConditionsError, GetApiConnectionsByConnectionIdConditionsResponse, PostApiConnectionsByConnectionIdConditionsData, PostApiConnectionsByConnectionIdConditionsError, PostApiConnectionsByConnectionIdConditionsResponse, GetApiConnectionConditionsByIdData, GetApiConnectionConditionsByIdError, GetApiConnectionConditionsByIdResponse, PatchApiConnectionConditionsByIdData, PatchApiConnectionConditionsByIdError, PatchApiConnectionConditionsByIdResponse, DeleteApiConnectionConditionsByIdData, DeleteApiConnectionConditionsByIdError, DeleteApiConnectionConditionsByIdResponse, GetApiMatrixByMatrixIdConnectionsData, GetApiMatrixByMatrixIdConnectionsError, GetApiMatrixByMatrixIdConnectionsResponse, PostApiMatrixByMatrixIdConnectionsData, PostApiMatrixByMatrixIdConnectionsError, PostApiMatrixByMatrixIdConnectionsResponse, GetApiConnectionsByConnectionIdData, GetApiConnectionsByConnectionIdError, GetApiConnectionsByConnectionIdResponse, PatchApiConnectionsByConnectionIdData, PatchApiConnectionsByConnectionIdError, PatchApiConnectionsByConnectionIdResponse, DeleteApiConnectionsByConnectionIdData, DeleteApiConnectionsByConnectionIdError, DeleteApiConnectionsByConnectionIdResponse, GetApiMatrixProjectByProjectIdData, GetApiMatrixProjectByProjectIdError, GetApiMatrixProjectByProjectIdResponse, PostApiMatrixProjectByProjectIdData, PostApiMatrixProjectByProjectIdError, PostApiMatrixProjectByProjectIdResponse, GetApiMatrixByMatrixIdData, GetApiMatrixByMatrixIdError, GetApiMatrixByMatrixIdResponse, PatchApiMatrixByMatrixIdData, PatchApiMatrixByMatrixIdError, PatchApiMatrixByMatrixIdResponse, DeleteApiMatrixByMatrixIdData, DeleteApiMatrixByMatrixIdError, DeleteApiMatrixByMatrixIdResponse, PostApiMatrixByMatrixIdCloneData, PostApiMatrixByMatrixIdCloneError, PostApiMatrixByMatrixIdCloneResponse, GetApiMatrixByMatrixIdNodesData, GetApiMatrixByMatrixIdNodesError, GetApiMatrixByMatrixIdNodesResponse, PostApiMatrixByMatrixIdNodesData, PostApiMatrixByMatrixIdNodesError, PostApiMatrixByMatrixIdNodesResponse, GetApiNodesByNodeIdData, GetApiNodesByNodeIdError, GetApiNodesByNodeIdResponse, PatchApiNodesByNodeIdData, PatchApiNodesByNodeIdError, PatchApiNodesByNodeIdResponse, DeleteApiNodesByNodeIdData, DeleteApiNodesByNodeIdError, DeleteApiNodesByNodeIdResponse, GetApiProjectsData, GetApiProjectsError, GetApiProjectsResponse, PostApiProjectsData, PostApiProjectsError, PostApiProjectsResponse, GetApiProjectsByProjectIdData, GetApiProjectsByProjectIdError, GetApiProjectsByProjectIdResponse, PatchApiProjectsByProjectIdData, PatchApiProjectsByProjectIdError, PatchApiProjectsByProjectIdResponse, DeleteApiProjectsByProjectIdData, DeleteApiProjectsByProjectIdError, DeleteApiProjectsByProjectIdResponse, GetApiNodesByNodeIdTriggerData, GetApiNodesByNodeIdTriggerError, GetApiNodesByNodeIdTriggerResponse, PostApiNodesByNodeIdTriggerData, PostApiNodesByNodeIdTriggerError, PostApiNodesByNodeIdTriggerResponse, GetApiTriggersByTriggerIdData, GetApiTriggersByTriggerIdError, GetApiTriggersByTriggerIdResponse, PatchApiTriggersByTriggerIdData, PatchApiTriggersByTriggerIdError, PatchApiTriggersByTriggerIdResponse, DeleteApiTriggersByTriggerIdData, DeleteApiTriggersByTriggerIdError, DeleteApiTriggersByTriggerIdResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get all conditions for a connection
 */
export const getApiConnectionsByConnectionIdConditions = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiConnectionsByConnectionIdConditionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiConnectionsByConnectionIdConditionsResponse, GetApiConnectionsByConnectionIdConditionsError, ThrowOnError>({
        ...options,
        url: '/api/connections/{connectionId}/conditions'
    });
};

/**
 * Create a new condition
 */
export const postApiConnectionsByConnectionIdConditions = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiConnectionsByConnectionIdConditionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiConnectionsByConnectionIdConditionsResponse, PostApiConnectionsByConnectionIdConditionsError, ThrowOnError>({
        ...options,
        url: '/api/connections/{connectionId}/conditions'
    });
};

/**
 * Get a condition by ID
 */
export const getApiConnectionConditionsById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiConnectionConditionsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiConnectionConditionsByIdResponse, GetApiConnectionConditionsByIdError, ThrowOnError>({
        ...options,
        url: '/api/connection-conditions/{id}'
    });
};

/**
 * Update a condition
 */
export const patchApiConnectionConditionsById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiConnectionConditionsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchApiConnectionConditionsByIdResponse, PatchApiConnectionConditionsByIdError, ThrowOnError>({
        ...options,
        url: '/api/connection-conditions/{id}'
    });
};

/**
 * Delete a condition
 */
export const deleteApiConnectionConditionsById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiConnectionConditionsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiConnectionConditionsByIdResponse, DeleteApiConnectionConditionsByIdError, ThrowOnError>({
        ...options,
        url: '/api/connection-conditions/{id}'
    });
};

/**
 * Get all connections for a matrix
 */
export const getApiMatrixByMatrixIdConnections = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMatrixByMatrixIdConnectionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiMatrixByMatrixIdConnectionsResponse, GetApiMatrixByMatrixIdConnectionsError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/connections'
    });
};

/**
 * Create a new connection
 */
export const postApiMatrixByMatrixIdConnections = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMatrixByMatrixIdConnectionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiMatrixByMatrixIdConnectionsResponse, PostApiMatrixByMatrixIdConnectionsError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/connections'
    });
};

/**
 * Get a connection by ID
 */
export const getApiConnectionsByConnectionId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiConnectionsByConnectionIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiConnectionsByConnectionIdResponse, GetApiConnectionsByConnectionIdError, ThrowOnError>({
        ...options,
        url: '/api/connections/{connectionId}'
    });
};

/**
 * Update a connection
 */
export const patchApiConnectionsByConnectionId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiConnectionsByConnectionIdData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchApiConnectionsByConnectionIdResponse, PatchApiConnectionsByConnectionIdError, ThrowOnError>({
        ...options,
        url: '/api/connections/{connectionId}'
    });
};

/**
 * Delete a connection
 */
export const deleteApiConnectionsByConnectionId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiConnectionsByConnectionIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiConnectionsByConnectionIdResponse, DeleteApiConnectionsByConnectionIdError, ThrowOnError>({
        ...options,
        url: '/api/connections/{connectionId}'
    });
};

/**
 * Get all matrices for a project
 */
export const getApiMatrixProjectByProjectId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMatrixProjectByProjectIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiMatrixProjectByProjectIdResponse, GetApiMatrixProjectByProjectIdError, ThrowOnError>({
        ...options,
        url: '/api/matrix/project/{projectId}'
    });
};

/**
 * Create a new matrix
 */
export const postApiMatrixProjectByProjectId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMatrixProjectByProjectIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiMatrixProjectByProjectIdResponse, PostApiMatrixProjectByProjectIdError, ThrowOnError>({
        ...options,
        url: '/api/matrix/project/{projectId}'
    });
};

/**
 * Get a matrix by ID
 */
export const getApiMatrixByMatrixId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMatrixByMatrixIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiMatrixByMatrixIdResponse, GetApiMatrixByMatrixIdError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}'
    });
};

/**
 * Update a matrix
 */
export const patchApiMatrixByMatrixId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiMatrixByMatrixIdData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchApiMatrixByMatrixIdResponse, PatchApiMatrixByMatrixIdError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}'
    });
};

/**
 * Delete a matrix
 */
export const deleteApiMatrixByMatrixId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiMatrixByMatrixIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiMatrixByMatrixIdResponse, DeleteApiMatrixByMatrixIdError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}'
    });
};

/**
 * Clone a matrix
 */
export const postApiMatrixByMatrixIdClone = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMatrixByMatrixIdCloneData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiMatrixByMatrixIdCloneResponse, PostApiMatrixByMatrixIdCloneError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/clone'
    });
};

/**
 * Get all nodes for a matrix
 */
export const getApiMatrixByMatrixIdNodes = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiMatrixByMatrixIdNodesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiMatrixByMatrixIdNodesResponse, GetApiMatrixByMatrixIdNodesError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/nodes'
    });
};

/**
 * Create a new node
 */
export const postApiMatrixByMatrixIdNodes = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiMatrixByMatrixIdNodesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiMatrixByMatrixIdNodesResponse, PostApiMatrixByMatrixIdNodesError, ThrowOnError>({
        ...options,
        url: '/api/matrix/{matrixId}/nodes'
    });
};

/**
 * Get a node by ID
 */
export const getApiNodesByNodeId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiNodesByNodeIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiNodesByNodeIdResponse, GetApiNodesByNodeIdError, ThrowOnError>({
        ...options,
        url: '/api/nodes/{nodeId}'
    });
};

/**
 * Update a node
 */
export const patchApiNodesByNodeId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiNodesByNodeIdData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchApiNodesByNodeIdResponse, PatchApiNodesByNodeIdError, ThrowOnError>({
        ...options,
        url: '/api/nodes/{nodeId}'
    });
};

/**
 * Delete a node
 */
export const deleteApiNodesByNodeId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiNodesByNodeIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiNodesByNodeIdResponse, DeleteApiNodesByNodeIdError, ThrowOnError>({
        ...options,
        url: '/api/nodes/{nodeId}'
    });
};

/**
 * Get a paginated list of projects
 */
export const getApiProjects = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiProjectsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiProjectsResponse, GetApiProjectsError, ThrowOnError>({
        ...options,
        url: '/api/projects'
    });
};

/**
 * Create a new project
 */
export const postApiProjects = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiProjectsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiProjectsResponse, PostApiProjectsError, ThrowOnError>({
        ...options,
        url: '/api/projects'
    });
};

/**
 * Get a project by ID
 */
export const getApiProjectsByProjectId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiProjectsByProjectIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiProjectsByProjectIdResponse, GetApiProjectsByProjectIdError, ThrowOnError>({
        ...options,
        url: '/api/projects/{projectId}'
    });
};

/**
 * Update a project
 */
export const patchApiProjectsByProjectId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiProjectsByProjectIdData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchApiProjectsByProjectIdResponse, PatchApiProjectsByProjectIdError, ThrowOnError>({
        ...options,
        url: '/api/projects/{projectId}'
    });
};

/**
 * Delete a project
 */
export const deleteApiProjectsByProjectId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiProjectsByProjectIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiProjectsByProjectIdResponse, DeleteApiProjectsByProjectIdError, ThrowOnError>({
        ...options,
        url: '/api/projects/{projectId}'
    });
};

/**
 * Get trigger for a node
 */
export const getApiNodesByNodeIdTrigger = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiNodesByNodeIdTriggerData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiNodesByNodeIdTriggerResponse, GetApiNodesByNodeIdTriggerError, ThrowOnError>({
        ...options,
        url: '/api/nodes/{nodeId}/trigger'
    });
};

/**
 * Create a new trigger
 */
export const postApiNodesByNodeIdTrigger = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiNodesByNodeIdTriggerData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiNodesByNodeIdTriggerResponse, PostApiNodesByNodeIdTriggerError, ThrowOnError>({
        ...options,
        url: '/api/nodes/{nodeId}/trigger'
    });
};

/**
 * Get a trigger by ID
 */
export const getApiTriggersByTriggerId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiTriggersByTriggerIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiTriggersByTriggerIdResponse, GetApiTriggersByTriggerIdError, ThrowOnError>({
        ...options,
        url: '/api/triggers/{triggerId}'
    });
};

/**
 * Update a trigger
 */
export const patchApiTriggersByTriggerId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PatchApiTriggersByTriggerIdData, ThrowOnError>) => {
    return (options?.client ?? client).patch<PatchApiTriggersByTriggerIdResponse, PatchApiTriggersByTriggerIdError, ThrowOnError>({
        ...options,
        url: '/api/triggers/{triggerId}'
    });
};

/**
 * Delete a trigger
 */
export const deleteApiTriggersByTriggerId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiTriggersByTriggerIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiTriggersByTriggerIdResponse, DeleteApiTriggersByTriggerIdError, ThrowOnError>({
        ...options,
        url: '/api/triggers/{triggerId}'
    });
};