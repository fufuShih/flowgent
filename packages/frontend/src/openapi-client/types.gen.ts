// This file is auto-generated by @hey-api/openapi-ts

export type Connection = {
    /**
     * The connection ID
     */
    id: number;
    /**
     * The matrix ID this connection belongs to
     */
    matrixId: number;
    /**
     * Source node ID
     */
    sourceId: number;
    /**
     * Target node ID
     */
    targetId: number;
    /**
     * Connection type
     */
    type: 'default' | 'success' | 'error' | 'condition';
    /**
     * Connection configuration
     */
    config?: {
        [key: string]: unknown;
    };
    created: Date;
    updated: Date;
};

/**
 * Connection type
 */
export type type = 'default' | 'success' | 'error' | 'condition';

export type ConnectionCondition = {
    /**
     * The condition ID
     */
    id: number;
    /**
     * The associated connection ID
     */
    connectionId: number;
    /**
     * The condition configuration object
     */
    condition: {
        [key: string]: unknown;
    };
    created: Date;
    updated: Date;
};

export type Error = {
    success?: boolean;
    error?: string;
};

export type Matrix = {
    /**
     * The matrix ID
     */
    id: number;
    /**
     * The project ID this matrix belongs to
     */
    projectId: number;
    /**
     * Matrix name
     */
    name: string;
    /**
     * Matrix description
     */
    description?: (string) | null;
    /**
     * Matrix status
     */
    status: 'active' | 'inactive' | 'draft' | 'error';
    /**
     * Matrix configuration
     */
    config?: {
        [key: string]: unknown;
    };
    /**
     * Matrix version number
     */
    version: number;
    /**
     * ID of the parent matrix (if this is a sub-matrix)
     */
    parentMatrixId?: (number) | null;
    created: Date;
    updated: Date;
};

/**
 * Matrix status
 */
export type status = 'active' | 'inactive' | 'draft' | 'error';

export type Node = {
    /**
     * The node ID
     */
    id: number;
    /**
     * The matrix ID this node belongs to
     */
    matrixId: number;
    /**
     * Node type
     */
    type: 'trigger' | 'action' | 'condition' | 'subMatrix' | 'transformer' | 'loop';
    /**
     * Node name
     */
    name: string;
    /**
     * Node description
     */
    description?: (string) | null;
    /**
     * Node configuration
     */
    config?: {
        [key: string]: unknown;
    };
    position: {
        x?: number;
        y?: number;
    };
    /**
     * ID of the sub-matrix (if type is subMatrix)
     */
    subMatrixId?: (number) | null;
    created: Date;
    updated: Date;
};

/**
 * Node type
 */
export type type2 = 'trigger' | 'action' | 'condition' | 'subMatrix' | 'transformer' | 'loop';

export type Project = {
    /**
     * The project ID
     */
    id: number;
    /**
     * The project name
     */
    name: string;
    /**
     * The project description
     */
    description?: (string) | null;
    /**
     * Creation timestamp
     */
    created: Date;
    /**
     * Last update timestamp
     */
    updated: Date;
};

export type Success = {
    success?: boolean;
    data?: {
        [key: string]: unknown;
    };
};

export type Trigger = {
    /**
     * The trigger ID
     */
    id: number;
    /**
     * The associated node ID
     */
    nodeId: number;
    /**
     * Trigger type
     */
    type: 'webhook' | 'schedule' | 'event' | 'manual' | 'email' | 'database';
    /**
     * Trigger name
     */
    name: string;
    /**
     * Trigger configuration
     */
    config?: {
        [key: string]: unknown;
    };
    /**
     * Trigger status
     */
    status: 'active' | 'inactive' | 'error';
    lastTriggered?: (Date) | null;
    nextTrigger?: (Date) | null;
    created: Date;
    updated: Date;
};

/**
 * Trigger type
 */
export type type3 = 'webhook' | 'schedule' | 'event' | 'manual' | 'email' | 'database';

/**
 * Trigger status
 */
export type status2 = 'active' | 'inactive' | 'error';

export type GetApiConnectionsByConnectionIdConditionsData = {
    path: {
        /**
         * Connection ID
         */
        connectionId: number;
    };
};

export type GetApiConnectionsByConnectionIdConditionsResponse = (Array<ConnectionCondition>);

export type GetApiConnectionsByConnectionIdConditionsError = (unknown);

export type PostApiConnectionsByConnectionIdConditionsData = {
    body: {
        /**
         * Condition configuration object
         */
        condition: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * Connection ID
         */
        connectionId: number;
    };
};

export type PostApiConnectionsByConnectionIdConditionsResponse = (ConnectionCondition);

export type PostApiConnectionsByConnectionIdConditionsError = (unknown);

export type GetApiConnectionConditionsByIdData = {
    path: {
        /**
         * Condition ID
         */
        id: number;
    };
    query?: {
        /**
         * Include connection details in response
         */
        includeConnection?: boolean;
    };
};

export type GetApiConnectionConditionsByIdResponse = ((ConnectionCondition & {
    connection?: Connection;
}));

export type GetApiConnectionConditionsByIdError = (unknown);

export type PatchApiConnectionConditionsByIdData = {
    body: {
        /**
         * Updated condition configuration
         */
        condition?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * Condition ID
         */
        id: number;
    };
};

export type PatchApiConnectionConditionsByIdResponse = (ConnectionCondition);

export type PatchApiConnectionConditionsByIdError = (unknown);

export type DeleteApiConnectionConditionsByIdData = {
    path: {
        /**
         * Condition ID
         */
        id: number;
    };
};

export type DeleteApiConnectionConditionsByIdResponse = (void);

export type DeleteApiConnectionConditionsByIdError = (unknown);

export type GetApiMatrixByMatrixIdConnectionsData = {
    path: {
        /**
         * Matrix ID
         */
        matrixId: number;
    };
    query?: {
        /**
         * Include conditions in response
         */
        includeConditions?: boolean;
    };
};

export type GetApiMatrixByMatrixIdConnectionsResponse = (Array<(Connection & {
    conditions?: Array<ConnectionCondition>;
})>);

export type GetApiMatrixByMatrixIdConnectionsError = (unknown);

export type PostApiMatrixByMatrixIdConnectionsData = {
    body: {
        sourceId: number;
        targetId: number;
        type?: 'default' | 'success' | 'error' | 'condition';
        config?: {
            [key: string]: unknown;
        };
        conditions?: Array<{
            condition?: {
                [key: string]: unknown;
            };
        }>;
    };
    path: {
        /**
         * Matrix ID
         */
        matrixId: number;
    };
};

export type PostApiMatrixByMatrixIdConnectionsResponse = (Connection);

export type PostApiMatrixByMatrixIdConnectionsError = (unknown);

export type GetApiConnectionsByConnectionIdData = {
    path: {
        /**
         * Connection ID
         */
        connectionId: number;
    };
};

export type GetApiConnectionsByConnectionIdResponse = (Connection);

export type GetApiConnectionsByConnectionIdError = (unknown);

export type PatchApiConnectionsByConnectionIdData = {
    body: {
        type?: 'default' | 'success' | 'error' | 'condition';
        config?: {
            [key: string]: unknown;
        };
        conditions?: Array<{
            condition?: {
                [key: string]: unknown;
            };
        }>;
    };
    path: {
        /**
         * Connection ID
         */
        connectionId: number;
    };
};

export type PatchApiConnectionsByConnectionIdResponse = (Connection);

export type PatchApiConnectionsByConnectionIdError = (unknown);

export type DeleteApiConnectionsByConnectionIdData = {
    path: {
        /**
         * Connection ID
         */
        connectionId: number;
    };
};

export type DeleteApiConnectionsByConnectionIdResponse = (void);

export type DeleteApiConnectionsByConnectionIdError = (unknown);

export type GetApiMatrixProjectByProjectIdData = {
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
    query?: {
        /**
         * Items per page
         */
        limit?: number;
        /**
         * Page number
         */
        page?: number;
        /**
         * Filter by status
         */
        status?: 'active' | 'inactive' | 'draft' | 'error';
        /**
         * Filter by version
         */
        version?: number;
    };
};

export type GetApiMatrixProjectByProjectIdResponse = ({
    data?: Array<Matrix>;
    pagination?: {
        total?: number;
        page?: number;
        limit?: number;
        totalPages?: number;
    };
});

export type GetApiMatrixProjectByProjectIdError = (unknown);

export type PostApiMatrixProjectByProjectIdData = {
    body: {
        name: string;
        description?: string;
        status?: 'active' | 'inactive' | 'draft' | 'error';
        config?: {
            [key: string]: unknown;
        };
        parentMatrixId?: number;
    };
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
};

export type PostApiMatrixProjectByProjectIdResponse = (Matrix);

export type PostApiMatrixProjectByProjectIdError = (unknown);

export type GetApiMatrixByMatrixIdData = {
    path: {
        /**
         * Matrix ID
         */
        matrixId: number;
    };
    query?: {
        /**
         * Include connections in response
         */
        includeConnections?: boolean;
        /**
         * Include nodes in response
         */
        includeNodes?: boolean;
    };
};

export type GetApiMatrixByMatrixIdResponse = ((Matrix & {
    nodes?: Array<Node>;
    connections?: Array<Connection>;
}));

export type GetApiMatrixByMatrixIdError = (unknown);

export type PatchApiMatrixByMatrixIdData = {
    body: {
        name?: string;
        description?: string;
        status?: 'active' | 'inactive' | 'draft' | 'error';
        config?: {
            [key: string]: unknown;
        };
        version?: number;
    };
    path: {
        /**
         * Matrix ID
         */
        matrixId: number;
    };
};

export type PatchApiMatrixByMatrixIdResponse = (Matrix);

export type PatchApiMatrixByMatrixIdError = (unknown);

export type DeleteApiMatrixByMatrixIdData = {
    path: {
        /**
         * Matrix ID
         */
        matrixId: number;
    };
};

export type DeleteApiMatrixByMatrixIdResponse = (void);

export type DeleteApiMatrixByMatrixIdError = (unknown);

export type PostApiMatrixByMatrixIdCloneData = {
    path: {
        /**
         * Matrix ID to clone
         */
        matrixId: number;
    };
};

export type PostApiMatrixByMatrixIdCloneResponse = (Matrix);

export type PostApiMatrixByMatrixIdCloneError = (unknown);

export type GetApiMatrixByMatrixIdNodesData = {
    path: {
        /**
         * Matrix ID
         */
        matrixId: number;
    };
    query?: {
        /**
         * Include trigger details for trigger nodes
         */
        includeTrigger?: boolean;
        /**
         * Filter nodes by type
         */
        type?: 'trigger' | 'action' | 'condition' | 'subMatrix' | 'transformer' | 'loop';
    };
};

export type GetApiMatrixByMatrixIdNodesResponse = (Array<(Node & {
    trigger?: Trigger;
})>);

export type GetApiMatrixByMatrixIdNodesError = (unknown);

export type PostApiMatrixByMatrixIdNodesData = {
    body: {
        type: 'trigger' | 'action' | 'condition' | 'subMatrix' | 'transformer' | 'loop';
        name: string;
        description?: string;
        config?: {
            [key: string]: unknown;
        };
        position: {
            x: number;
            y: number;
        };
        subMatrixId?: number;
        trigger?: {
            type?: 'webhook' | 'schedule' | 'event' | 'manual' | 'email' | 'database';
            name?: string;
            config?: {
                [key: string]: unknown;
            };
        };
    };
    path: {
        /**
         * Matrix ID
         */
        matrixId: number;
    };
};

export type PostApiMatrixByMatrixIdNodesResponse = (Node);

export type PostApiMatrixByMatrixIdNodesError = (unknown);

export type GetApiNodesByNodeIdData = {
    path: {
        /**
         * Node ID
         */
        nodeId: number;
    };
};

export type GetApiNodesByNodeIdResponse = ((Node & {
    trigger?: Trigger;
}));

export type GetApiNodesByNodeIdError = (unknown);

export type PatchApiNodesByNodeIdData = {
    body: {
        name?: string;
        description?: string;
        config?: {
            [key: string]: unknown;
        };
        position?: {
            x?: number;
            y?: number;
        };
        trigger?: {
            type?: 'webhook' | 'schedule' | 'event' | 'manual' | 'email' | 'database';
            name?: string;
            config?: {
                [key: string]: unknown;
            };
            status?: 'active' | 'inactive' | 'error';
        };
    };
    path: {
        /**
         * Node ID
         */
        nodeId: number;
    };
};

export type PatchApiNodesByNodeIdResponse = (Node);

export type PatchApiNodesByNodeIdError = (unknown);

export type DeleteApiNodesByNodeIdData = {
    path: {
        /**
         * Node ID
         */
        nodeId: number;
    };
};

export type DeleteApiNodesByNodeIdResponse = (void);

export type DeleteApiNodesByNodeIdError = (unknown);

export type GetApiProjectsData = {
    query?: {
        /**
         * Number of items per page
         */
        limit?: number;
        /**
         * Page number
         */
        page?: number;
        /**
         * Search term for project name
         */
        search?: string;
    };
};

export type GetApiProjectsResponse = ({
    data?: Array<Project>;
    pagination?: {
        total?: number;
        page?: number;
        limit?: number;
        totalPages?: number;
    };
});

export type GetApiProjectsError = (unknown);

export type PostApiProjectsData = {
    body: {
        name: string;
        description?: string;
    };
};

export type PostApiProjectsResponse = (Project);

export type PostApiProjectsError = (unknown);

export type GetApiProjectsByProjectIdData = {
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
};

export type GetApiProjectsByProjectIdResponse = (Project);

export type GetApiProjectsByProjectIdError = (unknown);

export type PatchApiProjectsByProjectIdData = {
    body: {
        name?: string;
        description?: string;
    };
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
};

export type PatchApiProjectsByProjectIdResponse = (Project);

export type PatchApiProjectsByProjectIdError = (unknown);

export type DeleteApiProjectsByProjectIdData = {
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
};

export type DeleteApiProjectsByProjectIdResponse = (void);

export type DeleteApiProjectsByProjectIdError = (unknown);

export type GetApiNodesByNodeIdTriggerData = {
    path: {
        /**
         * Node ID
         */
        nodeId: number;
    };
};

export type GetApiNodesByNodeIdTriggerResponse = (Trigger);

export type GetApiNodesByNodeIdTriggerError = (unknown);

export type PostApiNodesByNodeIdTriggerData = {
    body: {
        type: 'webhook' | 'schedule' | 'event' | 'manual' | 'email' | 'database';
        name: string;
        config?: {
            [key: string]: unknown;
        };
        status?: 'active' | 'inactive' | 'error';
    };
    path: {
        /**
         * Node ID
         */
        nodeId: number;
    };
};

export type PostApiNodesByNodeIdTriggerResponse = (Trigger);

export type PostApiNodesByNodeIdTriggerError = (unknown);

export type GetApiTriggersByTriggerIdData = {
    path: {
        /**
         * Trigger ID
         */
        triggerId: number;
    };
};

export type GetApiTriggersByTriggerIdResponse = ((Trigger & {
    node?: Node;
}));

export type GetApiTriggersByTriggerIdError = (unknown);

export type PatchApiTriggersByTriggerIdData = {
    body: {
        type?: 'webhook' | 'schedule' | 'event' | 'manual' | 'email' | 'database';
        name?: string;
        config?: {
            [key: string]: unknown;
        };
        status?: 'active' | 'inactive' | 'error';
        lastTriggered?: Date;
        nextTrigger?: Date;
    };
    path: {
        /**
         * Trigger ID
         */
        triggerId: number;
    };
};

export type PatchApiTriggersByTriggerIdResponse = (Trigger);

export type PatchApiTriggersByTriggerIdError = (unknown);

export type DeleteApiTriggersByTriggerIdData = {
    path: {
        /**
         * Trigger ID
         */
        triggerId: number;
    };
};

export type DeleteApiTriggersByTriggerIdResponse = (void);

export type DeleteApiTriggersByTriggerIdError = (unknown);

export type GetApiConnectionsByConnectionIdConditionsResponseTransformer = (data: any) => Promise<GetApiConnectionsByConnectionIdConditionsResponse>;

export type ConnectionConditionModelResponseTransformer = (data: any) => ConnectionCondition;

export const ConnectionConditionModelResponseTransformer: ConnectionConditionModelResponseTransformer = data => {
    if (data?.created) {
        data.created = new Date(data.created);
    }
    if (data?.updated) {
        data.updated = new Date(data.updated);
    }
    return data;
};

export const GetApiConnectionsByConnectionIdConditionsResponseTransformer: GetApiConnectionsByConnectionIdConditionsResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(ConnectionConditionModelResponseTransformer);
    }
    return data;
};

export type PostApiConnectionsByConnectionIdConditionsResponseTransformer = (data: any) => Promise<PostApiConnectionsByConnectionIdConditionsResponse>;

export const PostApiConnectionsByConnectionIdConditionsResponseTransformer: PostApiConnectionsByConnectionIdConditionsResponseTransformer = async (data) => {
    ConnectionConditionModelResponseTransformer(data);
    return data;
};

export type PatchApiConnectionConditionsByIdResponseTransformer = (data: any) => Promise<PatchApiConnectionConditionsByIdResponse>;

export const PatchApiConnectionConditionsByIdResponseTransformer: PatchApiConnectionConditionsByIdResponseTransformer = async (data) => {
    ConnectionConditionModelResponseTransformer(data);
    return data;
};

export type PostApiMatrixByMatrixIdConnectionsResponseTransformer = (data: any) => Promise<PostApiMatrixByMatrixIdConnectionsResponse>;

export type ConnectionModelResponseTransformer = (data: any) => Connection;

export const ConnectionModelResponseTransformer: ConnectionModelResponseTransformer = data => {
    if (data?.created) {
        data.created = new Date(data.created);
    }
    if (data?.updated) {
        data.updated = new Date(data.updated);
    }
    return data;
};

export const PostApiMatrixByMatrixIdConnectionsResponseTransformer: PostApiMatrixByMatrixIdConnectionsResponseTransformer = async (data) => {
    ConnectionModelResponseTransformer(data);
    return data;
};

export type GetApiConnectionsByConnectionIdResponseTransformer = (data: any) => Promise<GetApiConnectionsByConnectionIdResponse>;

export const GetApiConnectionsByConnectionIdResponseTransformer: GetApiConnectionsByConnectionIdResponseTransformer = async (data) => {
    ConnectionModelResponseTransformer(data);
    return data;
};

export type PatchApiConnectionsByConnectionIdResponseTransformer = (data: any) => Promise<PatchApiConnectionsByConnectionIdResponse>;

export const PatchApiConnectionsByConnectionIdResponseTransformer: PatchApiConnectionsByConnectionIdResponseTransformer = async (data) => {
    ConnectionModelResponseTransformer(data);
    return data;
};

export type GetApiMatrixProjectByProjectIdResponseTransformer = (data: any) => Promise<GetApiMatrixProjectByProjectIdResponse>;

export type MatrixModelResponseTransformer = (data: any) => Matrix;

export const MatrixModelResponseTransformer: MatrixModelResponseTransformer = data => {
    if (data?.created) {
        data.created = new Date(data.created);
    }
    if (data?.updated) {
        data.updated = new Date(data.updated);
    }
    return data;
};

export const GetApiMatrixProjectByProjectIdResponseTransformer: GetApiMatrixProjectByProjectIdResponseTransformer = async (data) => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(MatrixModelResponseTransformer);
    }
    return data;
};

export type PostApiMatrixProjectByProjectIdResponseTransformer = (data: any) => Promise<PostApiMatrixProjectByProjectIdResponse>;

export const PostApiMatrixProjectByProjectIdResponseTransformer: PostApiMatrixProjectByProjectIdResponseTransformer = async (data) => {
    MatrixModelResponseTransformer(data);
    return data;
};

export type PatchApiMatrixByMatrixIdResponseTransformer = (data: any) => Promise<PatchApiMatrixByMatrixIdResponse>;

export const PatchApiMatrixByMatrixIdResponseTransformer: PatchApiMatrixByMatrixIdResponseTransformer = async (data) => {
    MatrixModelResponseTransformer(data);
    return data;
};

export type PostApiMatrixByMatrixIdCloneResponseTransformer = (data: any) => Promise<PostApiMatrixByMatrixIdCloneResponse>;

export const PostApiMatrixByMatrixIdCloneResponseTransformer: PostApiMatrixByMatrixIdCloneResponseTransformer = async (data) => {
    MatrixModelResponseTransformer(data);
    return data;
};

export type PostApiMatrixByMatrixIdNodesResponseTransformer = (data: any) => Promise<PostApiMatrixByMatrixIdNodesResponse>;

export type NodeModelResponseTransformer = (data: any) => Node;

export const NodeModelResponseTransformer: NodeModelResponseTransformer = data => {
    if (data?.created) {
        data.created = new Date(data.created);
    }
    if (data?.updated) {
        data.updated = new Date(data.updated);
    }
    return data;
};

export const PostApiMatrixByMatrixIdNodesResponseTransformer: PostApiMatrixByMatrixIdNodesResponseTransformer = async (data) => {
    NodeModelResponseTransformer(data);
    return data;
};

export type PatchApiNodesByNodeIdResponseTransformer = (data: any) => Promise<PatchApiNodesByNodeIdResponse>;

export const PatchApiNodesByNodeIdResponseTransformer: PatchApiNodesByNodeIdResponseTransformer = async (data) => {
    NodeModelResponseTransformer(data);
    return data;
};

export type GetApiProjectsResponseTransformer = (data: any) => Promise<GetApiProjectsResponse>;

export type ProjectModelResponseTransformer = (data: any) => Project;

export const ProjectModelResponseTransformer: ProjectModelResponseTransformer = data => {
    if (data?.created) {
        data.created = new Date(data.created);
    }
    if (data?.updated) {
        data.updated = new Date(data.updated);
    }
    return data;
};

export const GetApiProjectsResponseTransformer: GetApiProjectsResponseTransformer = async (data) => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(ProjectModelResponseTransformer);
    }
    return data;
};

export type PostApiProjectsResponseTransformer = (data: any) => Promise<PostApiProjectsResponse>;

export const PostApiProjectsResponseTransformer: PostApiProjectsResponseTransformer = async (data) => {
    ProjectModelResponseTransformer(data);
    return data;
};

export type GetApiProjectsByProjectIdResponseTransformer = (data: any) => Promise<GetApiProjectsByProjectIdResponse>;

export const GetApiProjectsByProjectIdResponseTransformer: GetApiProjectsByProjectIdResponseTransformer = async (data) => {
    ProjectModelResponseTransformer(data);
    return data;
};

export type PatchApiProjectsByProjectIdResponseTransformer = (data: any) => Promise<PatchApiProjectsByProjectIdResponse>;

export const PatchApiProjectsByProjectIdResponseTransformer: PatchApiProjectsByProjectIdResponseTransformer = async (data) => {
    ProjectModelResponseTransformer(data);
    return data;
};

export type GetApiNodesByNodeIdTriggerResponseTransformer = (data: any) => Promise<GetApiNodesByNodeIdTriggerResponse>;

export type TriggerModelResponseTransformer = (data: any) => Trigger;

export const TriggerModelResponseTransformer: TriggerModelResponseTransformer = data => {
    if (data?.lastTriggered) {
        data.lastTriggered = new Date(data.lastTriggered);
    }
    if (data?.nextTrigger) {
        data.nextTrigger = new Date(data.nextTrigger);
    }
    if (data?.created) {
        data.created = new Date(data.created);
    }
    if (data?.updated) {
        data.updated = new Date(data.updated);
    }
    return data;
};

export const GetApiNodesByNodeIdTriggerResponseTransformer: GetApiNodesByNodeIdTriggerResponseTransformer = async (data) => {
    TriggerModelResponseTransformer(data);
    return data;
};

export type PostApiNodesByNodeIdTriggerResponseTransformer = (data: any) => Promise<PostApiNodesByNodeIdTriggerResponse>;

export const PostApiNodesByNodeIdTriggerResponseTransformer: PostApiNodesByNodeIdTriggerResponseTransformer = async (data) => {
    TriggerModelResponseTransformer(data);
    return data;
};

export type PatchApiTriggersByTriggerIdResponseTransformer = (data: any) => Promise<PatchApiTriggersByTriggerIdResponse>;

export const PatchApiTriggersByTriggerIdResponseTransformer: PatchApiTriggersByTriggerIdResponseTransformer = async (data) => {
    TriggerModelResponseTransformer(data);
    return data;
};